generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(uuid())
  email            String    @unique
  password         String
  name             String
  role             String    @default("user")
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  resetToken       String?
  resetTokenExpiry DateTime?
  comments         Comment[]
  mentor           Mentor?
  posts            Post[]
}

model Mentor {
  id                    String   @id @default(uuid())
  recommend_mentor_id   String
  recommended_mentor_id String?
  user_id               String   @unique
  name                  String
  title                 String
  description           String
  career                String
  skills                String[]
  hourly_rate           Int
  expertise             String[]
  star_rating           Float    @default(0)
  mentor_point          Int      @default(0)
  is_verified           Boolean  @default(false)
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
  user                  User     @relation(fields: [user_id], references: [id])
}

model Board {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  posts       Post[]
}

model Post {
  id        String    @id @default(uuid())
  title     String
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  authorId  String
  boardId   String
  category  String
  tags      String[]
  comments  Comment[]
  author    User      @relation(fields: [authorId], references: [id])
  board     Board     @relation(fields: [boardId], references: [id])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  likes     Int      @default(0)
  dislikes  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  postId    String
  author    User     @relation(fields: [authorId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
}

model NewsArticle {
  id             String        @id @default(uuid())
  title          String
  content        String
  summary        String
  url            String        @unique
  source         String
  publishedAt    DateTime
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  categoryCode   String        @default("10000000")
  topic          String?
  topicSummaryId String?
  TopicSummary   TopicSummary? @relation(fields: [topicSummaryId], references: [id])

  @@index([source])
  @@index([publishedAt])
  @@index([categoryCode])
}

model TopicSummary {
  id           String        @id @default(uuid())
  title        String        @unique
  content      String
  categoryCode String        @default("10000000")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  NewsArticle  NewsArticle[]

  @@index([categoryCode])
}

model ChatSession {
  id        String    @id @default(uuid())
  userId    String
  problemId String?
  title     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  metadata  Json?
  messages  Message[]

  @@index([userId])
  @@index([problemId])
}

model Message {
  id        String      @id @default(uuid())
  sessionId String
  role      String
  content   String
  createdAt DateTime    @default(now())
  tokens    Int?
  metadata  Json?
  session   ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
}
